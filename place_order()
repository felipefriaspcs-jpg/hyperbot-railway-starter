import pandas as pd
import pandas_ta as ta
import ccxt

# === CONFIG ===
symbol = 'XRP/USDT'
timeframe = '1h'
limit = 100
trade_amount = 10  # USD equivalent per trade (or adjust logic to match base currency)

# === Bitrue API Setup ===
exchange = ccxt.bitrue({
    'apiKey': 'YOUR_API_KEY',
    'secret': 'YOUR_SECRET_KEY',
    'enableRateLimit': True,
})

# === Place Market Order ===
def place_order(symbol, side, amount_usdt):
    try:
        market = exchange.market(symbol)
        ticker = exchange.fetch_ticker(symbol)
        price = ticker['last']

        # Calculate amount to buy/sell in base currency (e.g., XRP)
        amount_base = amount_usdt / price
        amount_base = round(amount_base, market['precision']['amount'])

        print(f"üì• Placing {side.upper()} order for {amount_base} {market['base']} at ~{price} USDT")

        order = exchange.create_market_order(symbol, side, amount_base)
        print(f"‚úÖ Order placed: {order['id']}")
        return order
    except Exception as e:
        print(f"‚ùå Failed to place {side.upper()} order on {symbol}: {e}")
        return None

# === Signal Logic ===
def generate_signal(df):
    if df is None or df.empty or len(df) < 50:
        return "ERROR"

    last = df.iloc[-1]
    if (
        last['rsi'] < 30 and
        last['MACD_12_26_9'] > last['MACDs_12_26_9'] and
        last['close'] < last['BBL_20_2.0']
    ):
        place_order(symbol, 'buy', trade_amount)
        return "BUY"
    elif (
        last['rsi'] > 70 and
        last['MACD_12_26_9'] < last['MACDs_12_26_9'] and
        last['close'] > last['BBU_20_2.0']
    ):
        place_order(symbol, 'sell', trade_amount)
        return "SELL"
    else:
        return "HOLD"

# === Main Analysis ===
try:
    ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')

    df['rsi'] = ta.rsi(df['close'], length=14)
    macd = ta.macd(df['close'])
    bbands = ta.bbands(df['close'])

    df = pd.concat([df, macd, bbands], axis=1)

    signal = generate_signal(df)
    print(f"üìä Signal: {signal}")

except Exception as e:
    print(f"‚ùå Analysis Error: {e}")
